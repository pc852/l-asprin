asprin_vL version 1.0
Reading from stdin
-:246:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:256:3-24: info: atom does not occur in any rule head:
  preference(#X0,#P1,0,#P2,#P3)

-:271:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:352:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:613:65-91: info: atom does not occur in any rule head:
  preference(#X0,#X1,2,for(#X2),#P3)

-:626:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:803:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:932:38-65: info: atom does not occur in any rule head:
  preference(#X0,#X1,0,for(#X2),#P3)

-:1004:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1008:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1008:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1014:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1113:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1139:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1259:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1293:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1315:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:156:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:157:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:158:25-35: info: atom does not occur in any rule head:
  forbid_unc

Solving...
Answer: 1
preference(1,less(weight))
Optimization: 36 0
Answer: 2
preference(1,(1,10),1,for(atom(hasMajorGrp(1))),15) preference(1,less(weight))
Optimization: 28 1
Answer: 3
preference(1,(1,1),1,for(neg(atom(isPale(1)))),1) preference(1,(1,2),1,for(neg(atom(isVeg(1)))),1) preference(1,(1,3),1,for(neg(atom(isTuna(1)))),1) preference(1,(1,4),1,for(neg(atom(isSpecial(1)))),1) preference(1,(1,5),1,for(neg(atom(isFattyFish(1)))),1) preference(1,(1,6),1,for(neg(atom(isCreamy(1)))),1) preference(1,(1,7),1,for(neg(atom(isSweet(1)))),1) preference(1,(1,8),1,for(neg(atom(isLight(1)))),1) preference(1,(1,9),1,for(neg(atom(isPopular(1)))),1) preference(1,(1,10),1,for(neg(atom(hasPrice(1)))),2) preference(1,less(weight))
Optimization: 25 10
Answer: 4
preference(1,(1,4),1,for(neg(atom(hasMajorGrp(0)))),5) preference(1,(1,10),1,for(atom(isCreamy(1))),1) preference(1,less(weight))
Optimization: 24 2
Answer: 5
preference(1,(1,4),1,for(atom(hasMajorGrp(1))),4) preference(1,(1,6),1,for(atom(isPopular(1))),4) preference(1,(1,10),1,for(atom(isCreamy(1))),1) preference(1,less(weight))
Optimization: 21 3
Answer: 6
preference(1,(1,4),1,for(atom(isVeg(1))),5) preference(1,(1,6),1,for(atom(isPopular(1))),4) preference(1,(1,10),1,for(atom(isCreamy(1))),1) preference(1,less(weight))
Optimization: 19 3
Answer: 7
preference(1,(1,9),1,for(neg(atom(hasStyle(1)))),2) preference(1,(1,10),1,for(atom(isCreamy(1))),1) preference(1,less(weight))
Optimization: 18 2
Answer: 8
preference(1,(1,9),1,for(neg(atom(hasStyle(1)))),2) preference(1,(1,4),1,for(atom(isVeg(1))),1) preference(1,(1,10),1,for(atom(isCreamy(1))),1) preference(1,less(weight))
Optimization: 17 3
Answer: 9
preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),4) preference(1,(1,1),1,for(atom(isVeg(1))),3) preference(1,(1,6),1,for(atom(isPopular(1))),4) preference(1,(1,10),1,for(atom(isCreamy(1))),1) preference(1,less(weight))
Optimization: 14 4
Answer: 10
preference(1,(1,9),1,for(neg(atom(hasStyle(1)))),2) preference(1,(1,6),1,for(atom(isPopular(1))),4) preference(1,(1,7),1,for(atom(hasStyle(0))),4) preference(1,(1,10),1,for(atom(isCreamy(1))),1) preference(1,less(weight))
Optimization: 13 4
Answer: 11
preference(1,(1,9),1,for(neg(atom(hasStyle(1)))),2) preference(1,(1,1),1,for(atom(isVeg(1))),1) preference(1,(1,6),1,for(atom(isPopular(1))),4) preference(1,(1,7),1,for(atom(hasStyle(0))),4) preference(1,(1,10),1,for(atom(isCreamy(1))),1) preference(1,less(weight))
Optimization: 12 5
Answer: 12
preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),2) preference(1,(1,2),1,for(atom(isPale(1))),6) preference(1,(1,3),1,for(atom(hasStyle(0))),3) preference(1,(1,4),1,for(atom(hasMajorGrp(1))),7) preference(1,(1,5),1,for(atom(hasPrice(0))),5) preference(1,(1,6),1,for(atom(isPopular(1))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,9),1,for(atom(isSweet(1))),7) preference(1,(1,10),1,for(atom(isCreamy(1))),13) preference(1,less(weight))
Optimization: 11 9
Answer: 13
preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),2) preference(1,(1,2),1,for(atom(isPale(1))),6) preference(1,(1,3),1,for(atom(hasStyle(0))),3) preference(1,(1,4),1,for(atom(isVeg(1))),13) preference(1,(1,5),1,for(atom(hasPrice(0))),5) preference(1,(1,6),1,for(atom(isPopular(1))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,9),1,for(atom(isSweet(1))),7) preference(1,(1,10),1,for(atom(isCreamy(1))),13) preference(1,less(weight))
Optimization: 10 9
Answer: 14
preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),2) preference(1,(1,2),1,for(atom(hasMajorGrp(1))),15) preference(1,(1,3),1,for(atom(hasStyle(0))),3) preference(1,(1,5),1,for(atom(hasPrice(0))),5) preference(1,(1,6),1,for(atom(isPopular(1))),5) preference(1,(1,7),1,for(atom(hasMinorGrp(1))),4) preference(1,(1,9),1,for(atom(isSweet(1))),7) preference(1,(1,10),1,for(atom(isCreamy(1))),13) preference(1,less(weight))
Optimization: 8 8
Answer: 15
preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),2) preference(1,(1,2),1,for(atom(hasMajorGrp(1))),15) preference(1,(1,3),1,for(atom(hasStyle(0))),3) preference(1,(1,5),1,for(atom(hasPrice(0))),5) preference(1,(1,6),1,for(atom(isPopular(1))),5) preference(1,(1,7),1,for(atom(isRaw(0))),4) preference(1,(1,10),1,for(atom(isCreamy(1))),13) preference(1,less(weight))
Optimization: 7 7
Answer: 16
preference(1,(1,4),1,for(neg(atom(isRaw(1)))),4) preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),2) preference(1,(1,2),1,for(atom(hasMajorGrp(1))),15) preference(1,(1,3),1,for(atom(hasStyle(0))),3) preference(1,(1,5),1,for(atom(hasPrice(0))),5) preference(1,(1,6),1,for(atom(isPopular(1))),5) preference(1,(1,7),1,for(atom(isPale(1))),2) preference(1,(1,10),1,for(atom(isCreamy(1))),13) preference(1,less(weight))
Optimization: 6 8
Answer: 17
preference(1,(1,5),1,for(neg(atom(hasStyle(1)))),11) preference(1,(1,8),1,for(neg(atom(hasMajorGrp(0)))),9) preference(1,(1,1),1,for(atom(isRaw(0))),4) preference(1,(1,2),1,for(atom(isSweet(1))),1) preference(1,(1,3),1,for(atom(isSpecial(1))),5) preference(1,(1,4),1,for(atom(isLight(1))),5) preference(1,(1,6),1,for(atom(isPopular(1))),5) preference(1,(1,7),1,for(atom(isFattyFish(1))),2) preference(1,(1,9),1,for(atom(isCreamy(1))),13) preference(1,(1,10),1,for(atom(isPale(1))),1) preference(1,less(weight))
Optimization: 5 10
Answer: 18
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),8) preference(1,(1,2),1,for(atom(isSpecial(1))),7) preference(1,(1,3),1,for(atom(hasStyle(0))),3) preference(1,(1,4),1,for(atom(isPale(1))),2) preference(1,(1,5),1,for(atom(isLight(1))),5) preference(1,(1,6),1,for(atom(isPopular(1))),5) preference(1,(1,7),1,for(atom(isRaw(0))),4) preference(1,(1,9),1,for(atom(isSweet(1))),3) preference(1,(1,10),1,for(atom(isFattyFish(1))),1) preference(1,less(weight))
Optimization: 4 10
Answer: 19
preference(1,(1,1),1,for(neg(atom(hasPrice(0)))),2) preference(1,(1,8),1,for(neg(atom(hasStyle(1)))),8) preference(1,(1,2),1,for(atom(isSpecial(1))),7) preference(1,(1,3),1,for(atom(hasStyle(0))),3) preference(1,(1,4),1,for(atom(isPale(1))),1) preference(1,(1,5),1,for(atom(isLight(1))),5) preference(1,(1,6),1,for(atom(isPopular(1))),5) preference(1,(1,7),1,for(atom(isRaw(0))),4) preference(1,(1,9),1,for(atom(isSweet(1))),3) preference(1,(1,10),1,for(atom(isFattyFish(1))),1) preference(1,less(weight))
Optimization: 3 10
Answer: 20
preference(1,(1,6),1,for(neg(atom(isRaw(1)))),15) preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),10) preference(1,(1,1),1,for(atom(isRaw(0))),1) preference(1,(1,2),1,for(atom(isCreamy(1))),4) preference(1,(1,3),1,for(atom(isSpecial(1))),4) preference(1,(1,4),1,for(atom(hasStyle(0))),15) preference(1,(1,5),1,for(atom(isSweet(1))),1) preference(1,(1,8),1,for(atom(isPopular(1))),1) preference(1,(1,9),1,for(atom(isLight(1))),2) preference(1,(1,10),1,for(atom(hasMinorGrp(2))),9) preference(1,less(weight))
Optimization: 0 10
Progression : 0 [ 1;10] (Error: 9)
Progression : 0 [ 2;10] (Error: 4)
Answer: 21
preference(1,(1,1),1,for(neg(atom(isRaw(1)))),12) preference(1,(1,10),1,for(neg(atom(hasStyle(1)))),13) preference(1,(1,2),1,for(atom(hasStyle(0))),10) preference(1,(1,3),1,for(atom(isPopular(1))),10) preference(1,(1,4),1,for(atom(isSweet(1))),6) preference(1,(1,6),1,for(atom(hasMinorGrp(2))),8) preference(1,(1,7),1,for(atom(isSpecial(1))),6) preference(1,(1,8),1,for(atom(isLight(1))),12) preference(1,(1,9),1,for(atom(hasPrice(1))),3) preference(1,less(weight))
Optimization: 0 9
Answer: 22
preference(1,(1,5),1,for(neg(atom(isRaw(1)))),9) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),15) preference(1,(1,10),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,1),1,for(atom(isLight(1))),1) preference(1,(1,2),1,for(atom(isSpecial(1))),7) preference(1,(1,3),1,for(atom(isPopular(1))),2) preference(1,(1,4),1,for(atom(isPale(1))),2) preference(1,(1,8),1,for(atom(hasStyle(0))),4) preference(1,less(weight))
Optimization: 0 8
Answer: 23
preference(1,(1,5),1,for(neg(atom(isRaw(1)))),9) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),15) preference(1,(1,10),1,for(neg(atom(hasPrice(0)))),1) preference(1,(1,1),1,for(atom(isLight(1))),1) preference(1,(1,2),1,for(atom(isSpecial(1))),7) preference(1,(1,3),1,for(atom(isPopular(1))),2) preference(1,(1,4),1,for(atom(isPale(1))),2) preference(1,less(weight))
Optimization: 0 7
*** Info : (asprin_vL): Sending shutdown signal...
*** Info : (asprin_vL): Queueing signal...
Traceback (most recent call last):
  File "clingo/application.py", line 359, in _pyclingo_application_main
  File "asprin_vL.py", line 598, in main
  File "clingo/control.py", line 805, in solve
  File "clingo/solving.py", line 527, in get
  File "clingo/_internal.py", line 44, in _c_call
  File "clingo/_internal.py", line 75, in _handle_error
RuntimeError: solving stopped by signal
*** ERROR: (asprin_vL): solving stopped by signal
*** Info : (asprin_vL): Shutdown completed in 0.077 seconds
SATISFIABLE

INTERRUPTED  : 1
Models       : 23+
  Optimum    : unknown
Optimization : 0 7
Calls        : 1
Time         : 597.456s (Solving: 589.33s 1st Model: 0.06s Unsat: 0.00s)
CPU Time     : 2364.671s
Threads      : 4        (Winner: 4)

Choices      : 10289461 (Domain: 2328)
Conflicts    : 1552872  (Analyzed: 1552870)
Restarts     : 2322     (Average: 668.76 Last: 29042)
Model-Level  : 2389.9  
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 1556092  (Deleted: 1424719)
  Binary     : 288      (Ratio:   0.02%)
  Ternary    : 47       (Ratio:   0.00%)
  Conflict   : 1552870  (Average Length: 1573.8 Ratio:  99.79%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 3222     (Average Length:  150.4 Ratio:   0.21%) 
  Distributed: 1074     (Ratio:   0.07% Average LBD: 3.44) 
  Integrated : 3222     (Ratio: 300.00% Unit: 2 Average Jumps: 27.00)
Backjumps    : 1552870  (Average:  4.53 Max: 4229 Sum: 7037428)
  Executed   : 1552869  (Average:  4.53 Max: 4229 Sum: 7037414 Ratio: 100.00%)
  Bounded    : 1        (Average: 14.00 Max:  14 Sum:     14 Ratio:   0.00%)

Rules        : 2191681 
  Choice     : 11      
  Minimize   : 2       
Atoms        : 732140  
Bodies       : 749457  
  Sum        : 216     
  Count      : 10      
Equivalences : 2212244  (Atom=Atom: 714355 Body=Body: 732134 Other: 765755)
Tight        : Yes
Variables    : 22121    (Eliminated:    0 Frozen: 14321)
Constraints  : 1503718  (Binary:  98.9% Ternary:   0.5% Other:   0.6%)

No preference instances learned!

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: not atom(isPale(1))  ; 
  1 :: not atom(isVeg(1))  ; 
  1 :: not atom(isTuna(1))  ; 
  1 :: not atom(isSpecial(1))  ; 
  1 :: not atom(isFattyFish(1))  ; 
  1 :: not atom(isCreamy(1))  ; 
  1 :: not atom(isSweet(1))  ; 
  1 :: not atom(isLight(1))  ; 
  1 :: not atom(isPopular(1))  ; 
  2 :: not atom(hasPrice(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: not atom(hasMajorGrp(0))  ; 
  1 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(hasMajorGrp(1)) ; 
  4 :: atom(isPopular(1)) ; 
  1 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  5 :: atom(isVeg(1)) ; 
  4 :: atom(isPopular(1)) ; 
  1 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasStyle(1))  ; 
  1 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(isVeg(1)) ; 
  2 :: not atom(hasStyle(1))  ; 
  1 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  3 :: atom(isVeg(1)) ; 
  4 :: atom(isPopular(1)) ; 
  4 :: not atom(hasStyle(1))  ; 
  1 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(isPopular(1)) ; 
  4 :: atom(hasStyle(0)) ; 
  2 :: not atom(hasStyle(1))  ; 
  1 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(isVeg(1)) ; 
  4 :: atom(isPopular(1)) ; 
  4 :: atom(hasStyle(0)) ; 
  2 :: not atom(hasStyle(1))  ; 
  1 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(isPale(1)) ; 
  3 :: atom(hasStyle(0)) ; 
  7 :: atom(hasMajorGrp(1)) ; 
  5 :: atom(hasPrice(0)) ; 
  5 :: atom(isPopular(1)) ; 
  4 :: atom(hasMinorGrp(1)) ; 
  2 :: not atom(hasStyle(1))  ; 
  7 :: atom(isSweet(1)) ; 
  13 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  6 :: atom(isPale(1)) ; 
  3 :: atom(hasStyle(0)) ; 
  13 :: atom(isVeg(1)) ; 
  5 :: atom(hasPrice(0)) ; 
  5 :: atom(isPopular(1)) ; 
  4 :: atom(hasMinorGrp(1)) ; 
  2 :: not atom(hasStyle(1))  ; 
  7 :: atom(isSweet(1)) ; 
  13 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasStyle(0)) ; 
  5 :: atom(hasPrice(0)) ; 
  5 :: atom(isPopular(1)) ; 
  4 :: atom(hasMinorGrp(1)) ; 
  2 :: not atom(hasStyle(1))  ; 
  7 :: atom(isSweet(1)) ; 
  13 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasStyle(0)) ; 
  5 :: atom(hasPrice(0)) ; 
  5 :: atom(isPopular(1)) ; 
  4 :: atom(isRaw(0)) ; 
  2 :: not atom(hasStyle(1))  ; 
  13 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  15 :: atom(hasMajorGrp(1)) ; 
  3 :: atom(hasStyle(0)) ; 
  4 :: not atom(isRaw(1))  ; 
  5 :: atom(hasPrice(0)) ; 
  5 :: atom(isPopular(1)) ; 
  2 :: atom(isPale(1)) ; 
  2 :: not atom(hasStyle(1))  ; 
  13 :: atom(isCreamy(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  4 :: atom(isRaw(0)) ; 
  1 :: atom(isSweet(1)) ; 
  5 :: atom(isSpecial(1)) ; 
  5 :: atom(isLight(1)) ; 
  11 :: not atom(hasStyle(1))  ; 
  5 :: atom(isPopular(1)) ; 
  2 :: atom(isFattyFish(1)) ; 
  9 :: not atom(hasMajorGrp(0))  ; 
  13 :: atom(isCreamy(1)) ; 
  1 :: atom(isPale(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPrice(0))  ; 
  7 :: atom(isSpecial(1)) ; 
  3 :: atom(hasStyle(0)) ; 
  2 :: atom(isPale(1)) ; 
  5 :: atom(isLight(1)) ; 
  5 :: atom(isPopular(1)) ; 
  4 :: atom(isRaw(0)) ; 
  8 :: not atom(hasStyle(1))  ; 
  3 :: atom(isSweet(1)) ; 
  1 :: atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  2 :: not atom(hasPrice(0))  ; 
  7 :: atom(isSpecial(1)) ; 
  3 :: atom(hasStyle(0)) ; 
  1 :: atom(isPale(1)) ; 
  5 :: atom(isLight(1)) ; 
  5 :: atom(isPopular(1)) ; 
  4 :: atom(isRaw(0)) ; 
  8 :: not atom(hasStyle(1))  ; 
  3 :: atom(isSweet(1)) ; 
  1 :: atom(isFattyFish(1)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(isRaw(0)) ; 
  4 :: atom(isCreamy(1)) ; 
  4 :: atom(isSpecial(1)) ; 
  15 :: atom(hasStyle(0)) ; 
  1 :: atom(isSweet(1)) ; 
  15 :: not atom(isRaw(1))  ; 
  10 :: not atom(hasStyle(1))  ; 
  1 :: atom(isPopular(1)) ; 
  2 :: atom(isLight(1)) ; 
  9 :: atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,less(weight)){
  12 :: not atom(isRaw(1))  ; 
  10 :: atom(hasStyle(0)) ; 
  10 :: atom(isPopular(1)) ; 
  6 :: atom(isSweet(1)) ; 
  8 :: atom(hasMinorGrp(2)) ; 
  6 :: atom(isSpecial(1)) ; 
  12 :: atom(isLight(1)) ; 
  3 :: atom(hasPrice(1)) ; 
  13 :: not atom(hasStyle(1))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(isLight(1)) ; 
  7 :: atom(isSpecial(1)) ; 
  2 :: atom(isPopular(1)) ; 
  2 :: atom(isPale(1)) ; 
  9 :: not atom(isRaw(1))  ; 
  15 :: not atom(hasStyle(1))  ; 
  4 :: atom(hasStyle(0)) ; 
  1 :: not atom(hasPrice(0))  
}.

Learned preference statement: 

#preference(1,less(weight)){
  1 :: atom(isLight(1)) ; 
  7 :: atom(isSpecial(1)) ; 
  2 :: atom(isPopular(1)) ; 
  2 :: atom(isPale(1)) ; 
  9 :: not atom(isRaw(1))  ; 
  15 :: not atom(hasStyle(1))  ; 
  1 :: not atom(hasPrice(0))  
}.
