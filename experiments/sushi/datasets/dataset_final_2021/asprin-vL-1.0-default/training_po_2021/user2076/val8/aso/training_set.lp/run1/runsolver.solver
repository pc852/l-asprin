asprin_vL version 1.0
Reading from stdin
-:279:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:304:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:385:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:659:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:836:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1037:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1041:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1041:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1047:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1146:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1172:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1292:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1326:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1348:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:189:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:190:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:191:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:192:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:221:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

-:258:20-56: info: atom does not occur in any rule head:
  _p_error_type(T,ordering_min_length(N),M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(neg(atom(hasStyle(1)))),()) preference(1,(1,1),1,for(neg(atom(hasStyle(0)))),()) preference(1,(1,2),2,for(neg(atom(hasStyle(1)))),()) preference(1,(1,3),2,for(neg(atom(hasStyle(1)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),4,for(neg(atom(isTuna(1)))),()) preference(1,(1,2),4,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),4,for(neg(atom(isLight(1)))),()) preference(1,(1,2),1,for(atom(hasStyle(0))),()) preference(1,(1,3),1,for(atom(hasStyle(0))),()) preference(1,(1,1),2,for(atom(hasStyle(0))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,(1,2),3,for(atom(isPale(1))),()) preference(1,aso)
Optimization: 28 3
Answer: 2
preference(1,(1,1),0,for(neg(atom(hasStyle(1)))),()) preference(1,(1,1),1,for(neg(atom(hasStyle(0)))),()) preference(1,(1,2),2,for(neg(atom(hasStyle(1)))),()) preference(1,(1,3),2,for(neg(atom(hasStyle(1)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),4,for(neg(atom(isTuna(1)))),()) preference(1,(1,2),4,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),4,for(neg(atom(isLight(1)))),()) preference(1,(1,2),1,for(atom(hasStyle(0))),()) preference(1,(1,3),1,for(atom(hasStyle(0))),()) preference(1,(1,1),2,for(atom(hasStyle(0))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,(1,2),3,for(atom(isPale(1))),()) preference(1,aso)
Optimization: 15 3
Answer: 3
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),0,for(atom(hasPrice(0))),()) preference(1,(1,3),0,for(neg(atom(hasStyle(0)))),()) preference(1,(1,6),0,for(atom(isPale(1))),()) preference(1,(1,7),0,for(neg(atom(hasMajorGrp(1)))),()) preference(1,(1,8),0,for(atom(hasStyle(1))),()) preference(1,(1,5),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,2),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),3,for(neg(atom(hasStyle(1)))),()) preference(1,(1,5),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,8),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),4,for(neg(atom(isPopular(1)))),()) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),1,for(atom(isPopular(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(hasStyle(0))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isPopular(1))),()) preference(1,(1,4),2,for(atom(isVeg(1))),()) preference(1,(1,5),2,for(atom(hasMajorGrp(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(isPale(1))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,1),3,for(atom(isSweet(1))),()) preference(1,(1,2),3,for(atom(hasStyle(0))),()) preference(1,(1,3),3,for(atom(isSweet(1))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(hasMajorGrp(1))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(isTuna(1))),()) preference(1,(1,5),4,for(atom(hasStyle(0))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,(1,8),4,for(atom(hasStyle(0))),()) preference(1,aso)
Optimization: 14 8
Answer: 4
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),0,for(atom(hasPrice(0))),()) preference(1,(1,3),0,for(neg(atom(hasStyle(0)))),()) preference(1,(1,6),0,for(atom(isPale(1))),()) preference(1,(1,8),0,for(atom(hasStyle(1))),()) preference(1,(1,5),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,2),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),2,for(neg(atom(hasStyle(1)))),()) preference(1,(1,4),3,for(neg(atom(hasStyle(1)))),()) preference(1,(1,5),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,8),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),4,for(neg(atom(isPopular(1)))),()) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),1,for(atom(isPopular(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(hasStyle(0))),()) preference(1,(1,7),1,for(atom(isSpecial(1))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isPopular(1))),()) preference(1,(1,4),2,for(atom(isVeg(1))),()) preference(1,(1,5),2,for(atom(hasMajorGrp(1))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,1),3,for(atom(isSweet(1))),()) preference(1,(1,2),3,for(atom(hasStyle(0))),()) preference(1,(1,3),3,for(atom(isSweet(1))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(isPale(1))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(isTuna(1))),()) preference(1,(1,5),4,for(atom(hasStyle(0))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,(1,8),4,for(atom(hasStyle(0))),()) preference(1,aso)
Optimization: 13 8
Answer: 5
preference(1,(1,1),0,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,2),0,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,4),0,for(atom(isVeg(1))),()) preference(1,(1,6),0,for(atom(hasStyle(1))),()) preference(1,(1,7),0,for(neg(atom(isPopular(1)))),()) preference(1,(1,2),1,for(neg(atom(isPopular(1)))),()) preference(1,(1,4),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,6),1,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),2,for(neg(atom(isPopular(1)))),()) preference(1,(1,4),2,for(neg(atom(isLight(1)))),()) preference(1,(1,7),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),1,for(atom(isTuna(1))),()) preference(1,(1,7),1,for(atom(isSpecial(1))),()) preference(1,(1,7),2,for(atom(isPopular(1))),()) preference(1,aso)
Optimization: 12 5
Answer: 6
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),0,for(atom(hasPrice(0))),()) preference(1,(1,3),0,for(atom(isPale(1))),()) preference(1,(1,6),0,for(atom(isPale(1))),()) preference(1,(1,8),0,for(neg(atom(isPopular(1)))),()) preference(1,(1,5),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,2),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),2,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,3),3,for(neg(atom(hasStyle(1)))),()) preference(1,(1,4),3,for(neg(atom(hasStyle(1)))),()) preference(1,(1,8),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),1,for(atom(isPopular(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(hasStyle(0))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isPopular(1))),()) preference(1,(1,4),2,for(atom(isVeg(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,1),3,for(atom(isSweet(1))),()) preference(1,(1,2),3,for(atom(hasStyle(0))),()) preference(1,(1,5),3,for(atom(isPale(1))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(isPale(1))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(isTuna(1))),()) preference(1,(1,3),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,5),4,for(atom(hasStyle(0))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,(1,8),4,for(atom(hasStyle(0))),()) preference(1,aso)
Optimization: 11 8
Answer: 7
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),0,for(atom(hasPrice(0))),()) preference(1,(1,3),0,for(atom(isPale(1))),()) preference(1,(1,6),0,for(atom(isPale(1))),()) preference(1,(1,8),0,for(neg(atom(isPopular(1)))),()) preference(1,(1,5),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,7),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,2),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),2,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,3),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,8),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),4,for(neg(atom(isPopular(1)))),()) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),1,for(atom(isPopular(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(hasStyle(0))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isPopular(1))),()) preference(1,(1,4),2,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,1),3,for(atom(isSweet(1))),()) preference(1,(1,2),3,for(atom(hasStyle(0))),()) preference(1,(1,4),3,for(atom(isPale(1))),()) preference(1,(1,5),3,for(atom(isPale(1))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(isPale(1))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(isTuna(1))),()) preference(1,(1,5),4,for(atom(hasStyle(0))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,(1,8),4,for(atom(hasStyle(0))),()) preference(1,aso)
Optimization: 10 8
Answer: 8
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),0,for(atom(hasPrice(0))),()) preference(1,(1,3),0,for(atom(isPale(1))),()) preference(1,(1,6),0,for(atom(isPale(1))),()) preference(1,(1,8),0,for(neg(atom(isPopular(1)))),()) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,2),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isPale(1)))),()) preference(1,(1,4),3,for(neg(atom(hasStyle(1)))),()) preference(1,(1,5),3,for(neg(atom(isPopular(1)))),()) preference(1,(1,8),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,5),4,for(neg(atom(hasStyle(1)))),()) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),1,for(atom(isPopular(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(hasStyle(0))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isVeg(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,7),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),2,for(atom(isRaw(1))),()) preference(1,(1,1),3,for(atom(isSweet(1))),()) preference(1,(1,2),3,for(atom(hasStyle(0))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(hasMajorGrp(1))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(isTuna(1))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,(1,8),4,for(atom(hasStyle(0))),()) preference(1,aso)
Optimization: 9 8
Answer: 9
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,2),0,for(atom(hasPrice(0))),()) preference(1,(1,3),0,for(atom(isPale(1))),()) preference(1,(1,6),0,for(atom(isPale(1))),()) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,2),2,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,7),2,for(neg(atom(hasStyle(1)))),()) preference(1,(1,3),3,for(neg(atom(isPale(1)))),()) preference(1,(1,4),3,for(neg(atom(hasStyle(1)))),()) preference(1,(1,5),3,for(neg(atom(isPopular(1)))),()) preference(1,(1,8),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),4,for(neg(atom(hasStyle(1)))),()) preference(1,(1,8),4,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),1,for(atom(isPopular(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(hasStyle(0))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isVeg(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(isPopular(1))),()) preference(1,(1,1),3,for(atom(isSweet(1))),()) preference(1,(1,2),3,for(atom(hasStyle(0))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(hasMajorGrp(1))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(isTuna(1))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,aso)
Optimization: 7 8
Progression : [1;7] (Error: 6)
Answer: 10
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),0,for(atom(isPale(1))),()) preference(1,(1,6),0,for(atom(isPale(1))),()) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,2),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),2,for(neg(atom(hasStyle(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isPale(1)))),()) preference(1,(1,4),3,for(neg(atom(hasStyle(1)))),()) preference(1,(1,5),3,for(neg(atom(isPopular(1)))),()) preference(1,(1,8),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,5),4,for(neg(atom(hasStyle(1)))),()) preference(1,(1,8),4,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),1,for(atom(isPopular(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(hasStyle(0))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isVeg(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(isPopular(1))),()) preference(1,(1,1),3,for(atom(isSweet(1))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(hasMajorGrp(1))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(hasStyle(0))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,aso)
Optimization: 5 8
Answer: 11
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),0,for(atom(isPale(1))),()) preference(1,(1,6),0,for(atom(isPale(1))),()) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,2),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),2,for(neg(atom(hasStyle(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isPale(1)))),()) preference(1,(1,4),3,for(neg(atom(hasStyle(1)))),()) preference(1,(1,5),3,for(neg(atom(isPopular(1)))),()) preference(1,(1,5),4,for(neg(atom(hasStyle(1)))),()) preference(1,(1,8),4,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,1),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,2),1,for(atom(isPopular(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(hasStyle(0))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,1),2,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isVeg(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(isPopular(1))),()) preference(1,(1,1),3,for(atom(isSweet(1))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(hasMajorGrp(1))),()) preference(1,(1,8),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(isCreamy(1))),()) preference(1,(1,2),4,for(atom(hasMinorGrp(1))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,aso)
Optimization: 4 8
Answer: 12
preference(1,(1,2),0,for(neg(atom(isSpecial(1)))),()) preference(1,(1,3),0,for(atom(isPale(1))),()) preference(1,(1,6),0,for(atom(isPale(1))),()) preference(1,(1,6),1,for(neg(atom(hasStyle(1)))),()) preference(1,(1,2),2,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),2,for(neg(atom(hasStyle(1)))),()) preference(1,(1,8),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isSpecial(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isPale(1)))),()) preference(1,(1,4),3,for(neg(atom(hasStyle(1)))),()) preference(1,(1,5),3,for(neg(atom(isPopular(1)))),()) preference(1,(1,5),4,for(neg(atom(hasStyle(1)))),()) preference(1,(1,8),4,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,1),1,for(atom(isSpecial(1))),()) preference(1,(1,2),1,for(atom(isPopular(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(hasStyle(0))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isPopular(1))),()) preference(1,(1,1),2,for(atom(isPopular(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isVeg(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(hasMajorGrp(1))),()) preference(1,(1,8),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(isFattyFish(1))),()) preference(1,(1,2),4,for(atom(isTuna(1))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,aso)
Optimization: 3 8
Answer: 13
preference(1,(1,1),0,for(neg(atom(isPopular(1)))),()) preference(1,(1,2),0,for(neg(atom(isSpecial(1)))),()) preference(1,(1,3),0,for(atom(isPale(1))),()) preference(1,(1,6),0,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,2),2,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),2,for(neg(atom(hasStyle(1)))),()) preference(1,(1,8),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isSpecial(1)))),()) preference(1,(1,2),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isPale(1)))),()) preference(1,(1,4),3,for(neg(atom(hasStyle(1)))),()) preference(1,(1,5),3,for(neg(atom(isPopular(1)))),()) preference(1,(1,5),4,for(neg(atom(hasStyle(1)))),()) preference(1,(1,8),4,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,1),1,for(atom(isSpecial(1))),()) preference(1,(1,2),1,for(atom(isPopular(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(hasStyle(0))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isPopular(1))),()) preference(1,(1,1),2,for(atom(isPopular(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isVeg(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(hasMajorGrp(1))),()) preference(1,(1,8),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(isFattyFish(1))),()) preference(1,(1,2),4,for(atom(isTuna(1))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,aso)
Optimization: 2 8
Progression : [2;2] (Error: 0)
Progression : 2 [1;8] (Error: 7)
Answer: 14
preference(1,(1,1),0,for(neg(atom(isPopular(1)))),()) preference(1,(1,3),0,for(atom(isPale(1))),()) preference(1,(1,6),0,for(neg(atom(isSpecial(1)))),()) preference(1,(1,7),2,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,8),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),3,for(neg(atom(isSpecial(1)))),()) preference(1,(1,3),3,for(neg(atom(isPale(1)))),()) preference(1,(1,4),3,for(neg(atom(hasStyle(1)))),()) preference(1,(1,5),3,for(neg(atom(isPopular(1)))),()) preference(1,(1,5),4,for(neg(atom(hasStyle(1)))),()) preference(1,(1,8),4,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,1),1,for(atom(isSpecial(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(hasStyle(0))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,6),1,for(atom(isPopular(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isPopular(1))),()) preference(1,(1,1),2,for(atom(isPopular(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isVeg(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(isRaw(1))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(hasMajorGrp(1))),()) preference(1,(1,8),3,for(atom(hasStyle(0))),()) preference(1,(1,1),4,for(atom(isFattyFish(1))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,aso)
Optimization: 2 7
Answer: 15
preference(1,(1,3),0,for(atom(isPale(1))),()) preference(1,(1,6),0,for(neg(atom(isSpecial(1)))),()) preference(1,(1,7),2,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,8),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,3),3,for(neg(atom(isPale(1)))),()) preference(1,(1,4),3,for(neg(atom(hasStyle(1)))),()) preference(1,(1,5),3,for(neg(atom(isPopular(1)))),()) preference(1,(1,5),4,for(neg(atom(hasStyle(1)))),()) preference(1,(1,8),4,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(hasStyle(0))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,6),1,for(atom(isPopular(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,8),1,for(atom(isPopular(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(isVeg(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(isRaw(1))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(hasMajorGrp(1))),()) preference(1,(1,8),3,for(atom(hasStyle(0))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,aso)
Optimization: 2 6
Answer: 16
preference(1,(1,3),0,for(atom(isPale(1))),()) preference(1,(1,6),0,for(neg(atom(isSpecial(1)))),()) preference(1,(1,5),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),2,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(isPale(1)))),()) preference(1,(1,4),3,for(neg(atom(isPopular(1)))),()) preference(1,(1,5),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isPopular(1))),()) preference(1,(1,6),1,for(atom(isPopular(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,4),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(isRaw(1))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(hasMajorGrp(1))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,5),4,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,aso)
Optimization: 2 5
Answer: 17
preference(1,(1,6),0,for(neg(atom(isSpecial(1)))),()) preference(1,(1,3),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,7),2,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,5),3,for(neg(atom(isPopular(1)))),()) preference(1,(1,5),4,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),1,for(atom(isPopular(1))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,6),1,for(atom(isPopular(1))),()) preference(1,(1,7),1,for(atom(isFattyFish(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(isRaw(1))),()) preference(1,(1,6),3,for(atom(hasStyle(0))),()) preference(1,(1,7),3,for(atom(hasMajorGrp(1))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,6),4,for(atom(isVeg(1))),()) preference(1,aso)
Optimization: 2 4
Answer: 18
preference(1,(1,3),0,for(neg(atom(isPopular(1)))),()) preference(1,(1,7),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,5),3,for(neg(atom(isPopular(1)))),()) preference(1,(1,7),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,5),4,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,7),1,for(atom(isPopular(1))),()) preference(1,(1,3),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,3),3,for(atom(hasMinorGrp(1))),()) preference(1,aso)
Optimization: 2 3
Progression : 2 [2;3] (Error: 0.5)
OPTIMUM FOUND

Models       : 18
  Optimum    : yes
Optimization : 2 3
Calls        : 1
Time         : 32.090s (Solving: 25.18s 1st Model: 0.21s Unsat: 21.77s)
CPU Time     : 107.462s
Threads      : 4        (Winner: 1)

Choices      : 334908   (Domain: 7746)
Conflicts    : 77104    (Analyzed: 77098)
Restarts     : 108      (Average: 713.87 Last: 8182)
Model-Level  : 653.1   
Problems     : 12       (Average Length: 0.33 Splits: 0)
Lemmas       : 126316   (Deleted: 42560)
  Binary     : 4487     (Ratio:   3.55%)
  Ternary    : 10415    (Ratio:   8.25%)
  Conflict   : 77097    (Average Length:   70.1 Ratio:  61.04%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 49219    (Average Length:   23.9 Ratio:  38.96%) 
  Distributed: 16478    (Ratio:  21.37% Average LBD: 3.16) 
  Integrated : 49419    (Ratio: 299.91% Unit: 310 Average Jumps: 98.30)
Backjumps    : 77098    (Average:  3.70 Max: 930 Sum: 285188)
  Executed   : 77082    (Average:  3.70 Max: 930 Sum: 284933 Ratio:  99.91%)
  Bounded    : 16       (Average: 15.94 Max:  35 Sum:    255 Ratio:   0.09%)

Rules        : 2465433 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 676571  
Bodies       : 801850  
  Count      : 1768    
Equivalences : 2070538  (Atom=Atom: 594213 Body=Body: 640614 Other: 835711)
Tight        : Yes
Variables    : 93231    (Eliminated:    0 Frozen: 61455)
Constraints  : 1937373  (Binary:  95.3% Ternary:   4.1% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  not atom(hasStyle(0))  >> atom(hasStyle(0)) >> atom(hasPrice(0)) >> not atom(isTuna(1))  || not atom(hasStyle(1))  ; 
  atom(hasStyle(0)) >> not atom(hasStyle(1))  >> atom(isPale(1)) >> not atom(hasMajorGrp(0))  ; 
  atom(hasStyle(0)) >> not atom(hasStyle(1))  >> not atom(isRaw(1))  >> not atom(isLight(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasStyle(0))  >> atom(hasStyle(0)) >> atom(hasPrice(0)) >> not atom(isTuna(1))  || not atom(hasStyle(1))  ; 
  atom(hasStyle(0)) >> not atom(hasStyle(1))  >> atom(isPale(1)) >> not atom(hasMajorGrp(0))  ; 
  atom(hasStyle(0)) >> not atom(hasStyle(1))  >> not atom(isRaw(0))  >> not atom(isLight(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) >> atom(isSweet(1)) >> atom(isCreamy(1)) || not atom(isFattyFish(1))  ; 
  atom(isPopular(1)) >> not atom(hasMinorGrp(0))  >> atom(hasStyle(0)) >> atom(isTuna(1)) || atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(isPopular(1)) >> atom(isSweet(1)) >> not atom(isPopular(1))  || not atom(hasStyle(0))  ; 
  not atom(hasStyle(1))  >> atom(hasMinorGrp(0)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || atom(isPale(1)) ; 
  not atom(hasStyle(1))  >> atom(isPale(1)) >> atom(hasMajorGrp(1)) || not atom(hasMajorGrp(1))  ; 
  atom(isSpecial(1)) >> atom(isRaw(1)) >> not atom(hasMajorGrp(0))  >> atom(hasStyle(0)) || atom(hasStyle(1)) ; 
  atom(hasStyle(0)) >> atom(isVeg(1)) >> not atom(hasStyle(1))  ; 
  not atom(hasStyle(1))  >> atom(hasMajorGrp(1)) >> not atom(hasMajorGrp(0))  >> atom(hasStyle(0)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) >> atom(isSweet(1)) >> atom(isCreamy(1)) || not atom(isFattyFish(1))  ; 
  atom(isPopular(1)) >> not atom(hasMinorGrp(0))  >> atom(hasStyle(0)) >> atom(isTuna(1)) || atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(isPopular(1)) >> atom(isSweet(1)) >> not atom(isPopular(1))  || not atom(hasStyle(0))  ; 
  not atom(hasStyle(1))  >> atom(hasMinorGrp(0)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || atom(isPale(1)) ; 
  atom(isSpecial(1)) >> atom(isRaw(1)) >> not atom(hasMajorGrp(0))  >> atom(hasStyle(0)) || atom(hasStyle(1)) ; 
  atom(hasStyle(0)) >> atom(isVeg(1)) >> not atom(hasStyle(1))  ; 
  not atom(hasStyle(1))  >> atom(hasMajorGrp(1)) >> not atom(hasMajorGrp(0))  >> atom(hasStyle(0)) ; 
  atom(isSpecial(1)) >> not atom(hasStyle(1))  >> atom(isPale(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTuna(1)) >> not atom(isPopular(1))  || not atom(hasMinorGrp(2))  ; 
  not atom(isPopular(1))  || not atom(hasMajorGrp(0))  ; 
  not atom(hasStyle(1))  >> not atom(isLight(1))  || atom(isVeg(1)) ; 
  not atom(isFattyFish(1))  || atom(hasStyle(1)) ; 
  atom(isSpecial(1)) >> atom(isPopular(1)) >> not atom(isRaw(0))  || not atom(isPopular(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) >> atom(isSweet(1)) >> atom(isCreamy(1)) || not atom(isFattyFish(1))  ; 
  atom(isPopular(1)) >> not atom(hasMinorGrp(0))  >> atom(hasStyle(0)) >> atom(isTuna(1)) || atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(isPopular(1)) >> not atom(hasStyle(1))  >> atom(hasMinorGrp(0)) || atom(isPale(1)) ; 
  not atom(hasStyle(1))  >> atom(hasMinorGrp(0)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || atom(isPale(1)) ; 
  atom(isSpecial(1)) >> atom(isRaw(1)) >> not atom(hasMajorGrp(0))  >> atom(hasStyle(0)) || not atom(isPopular(1))  ; 
  atom(hasStyle(0)) >> atom(isVeg(1)) >> not atom(hasStyle(1))  ; 
  not atom(hasStyle(1))  >> atom(hasMinorGrp(0)) >> atom(isPale(1)) >> atom(hasStyle(0)) ; 
  not atom(hasStyle(1))  >> not atom(hasMinorGrp(2))  >> atom(isPale(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) >> atom(isSweet(1)) >> atom(isCreamy(1)) || not atom(isFattyFish(1))  ; 
  atom(isPopular(1)) >> not atom(hasMinorGrp(0))  >> atom(hasStyle(0)) >> atom(isTuna(1)) || atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(isPopular(1)) >> not atom(hasPrice(1))  >> not atom(isPopular(1))  || atom(isPale(1)) ; 
  not atom(hasStyle(1))  >> atom(hasMinorGrp(0)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || atom(isPale(1)) ; 
  atom(isSpecial(1)) >> atom(isRaw(1)) >> not atom(hasMajorGrp(0))  >> atom(hasStyle(0)) || not atom(isPopular(1))  ; 
  atom(hasStyle(0)) >> atom(isFattyFish(1)) >> atom(isPale(1)) ; 
  not atom(hasStyle(1))  >> atom(hasMinorGrp(0)) >> atom(isPale(1)) >> atom(hasStyle(0)) ; 
  not atom(hasStyle(1))  >> not atom(hasMinorGrp(2))  >> atom(isPale(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) >> atom(isSweet(1)) >> atom(isCreamy(1)) || not atom(isFattyFish(1))  ; 
  atom(isPopular(1)) >> not atom(hasMinorGrp(0))  >> atom(hasStyle(0)) >> atom(isTuna(1)) || atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(isCreamy(1)) >> not atom(isPale(1))  >> atom(isTuna(1)) || atom(isPale(1)) ; 
  not atom(hasStyle(1))  >> atom(hasMinorGrp(0)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || atom(isPale(1)) ; 
  atom(isSpecial(1)) >> atom(isRaw(1)) >> not atom(hasMajorGrp(0))  >> atom(hasStyle(0)) || not atom(isPopular(1))  ; 
  atom(hasStyle(0)) >> atom(isVeg(1)) >> not atom(hasStyle(1))  ; 
  atom(isSpecial(1)) >> atom(hasMinorGrp(0)) >> not atom(isPopular(1))  >> not atom(hasStyle(1))  ; 
  atom(isFattyFish(1)) >> atom(hasMinorGrp(1)) >> atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) >> atom(isSweet(1)) >> atom(isCreamy(1)) || not atom(isFattyFish(1))  ; 
  atom(isPopular(1)) >> not atom(hasMinorGrp(0))  >> atom(hasStyle(0)) >> atom(isTuna(1)) || atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(isCreamy(1)) >> not atom(isPale(1))  >> atom(isTuna(1)) || atom(isPale(1)) ; 
  not atom(hasStyle(1))  >> atom(hasMinorGrp(0)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || atom(isPale(1)) ; 
  atom(hasStyle(0)) >> atom(isVeg(1)) >> not atom(hasStyle(1))  ; 
  atom(isSpecial(1)) >> atom(hasMinorGrp(0)) >> not atom(isPopular(1))  >> not atom(hasStyle(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasStyle(1))  >> atom(hasMajorGrp(1)) ; 
  atom(isSpecial(1)) >> atom(isPopular(1)) >> not atom(isRaw(0))  >> not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) >> atom(isSweet(1)) >> atom(isCreamy(1)) || not atom(isFattyFish(1))  ; 
  atom(isSpecial(1)) >> atom(isCreamy(1)) >> not atom(isPale(1))  >> atom(isTuna(1)) || atom(isPale(1)) ; 
  not atom(hasStyle(1))  >> atom(hasMinorGrp(0)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || atom(isPale(1)) ; 
  atom(isPopular(1)) >> not atom(isCreamy(1))  >> not atom(hasMajorGrp(0))  >> atom(hasStyle(0)) ; 
  atom(hasStyle(0)) >> atom(isVeg(1)) >> not atom(hasStyle(1))  ; 
  atom(isSpecial(1)) >> atom(hasMinorGrp(0)) >> not atom(isPopular(1))  >> not atom(hasStyle(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasStyle(1))  >> atom(hasMajorGrp(1)) ; 
  atom(isSpecial(1)) >> atom(isPopular(1)) >> not atom(isRaw(0))  >> not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasMinorGrp(2)) >> atom(isFattyFish(1)) >> atom(isSweet(1)) >> atom(isCreamy(1)) || not atom(isFattyFish(1))  ; 
  atom(isSpecial(1)) >> atom(isCreamy(1)) >> not atom(isPale(1))  >> atom(isTuna(1)) || atom(isPale(1)) ; 
  not atom(hasStyle(1))  >> atom(hasMinorGrp(0)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || atom(isPale(1)) ; 
  atom(isPopular(1)) >> not atom(isCreamy(1))  >> not atom(hasMajorGrp(0))  >> atom(hasMinorGrp(1)) ; 
  atom(hasStyle(0)) >> atom(isVeg(1)) >> not atom(hasStyle(1))  ; 
  atom(isSpecial(1)) >> atom(hasMinorGrp(0)) >> not atom(isPopular(1))  >> not atom(hasStyle(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasStyle(1))  >> atom(hasMajorGrp(1)) ; 
  atom(isSpecial(1)) >> atom(isPopular(1)) >> atom(isFattyFish(1)) >> not atom(hasMinorGrp(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isPopular(1)) >> not atom(isSweet(1))  >> not atom(hasMajorGrp(0))  >> atom(isTuna(1)) || not atom(isSpecial(1))  ; 
  atom(isSpecial(1)) >> atom(isCreamy(1)) >> not atom(isPale(1))  >> atom(isTuna(1)) || atom(isPale(1)) ; 
  not atom(hasStyle(1))  >> atom(hasMinorGrp(0)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || atom(isPale(1)) ; 
  atom(isSpecial(1)) >> atom(isPopular(1)) >> not atom(isSpecial(1))  >> atom(isFattyFish(1)) ; 
  atom(hasStyle(0)) >> atom(isVeg(1)) >> not atom(hasStyle(1))  ; 
  atom(isSpecial(1)) >> atom(hasMinorGrp(0)) >> not atom(isPopular(1))  >> not atom(hasStyle(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasStyle(1))  >> atom(hasMajorGrp(1)) ; 
  atom(isPopular(1)) >> not atom(isCreamy(1))  >> atom(isFattyFish(1)) >> not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSpecial(1)) >> atom(isPopular(1)) >> not atom(isSpecial(1))  >> atom(isFattyFish(1)) || not atom(isPopular(1))  ; 
  atom(isPopular(1)) >> not atom(isSweet(1))  >> not atom(hasMajorGrp(0))  >> atom(isTuna(1)) || not atom(isSpecial(1))  ; 
  atom(isSpecial(1)) >> atom(isCreamy(1)) >> not atom(isPale(1))  >> atom(isTuna(1)) || atom(isPale(1)) ; 
  atom(hasMinorGrp(1)) >> atom(hasMinorGrp(0)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || not atom(hasMinorGrp(0))  ; 
  atom(hasStyle(0)) >> atom(isVeg(1)) >> not atom(hasStyle(1))  ; 
  atom(isSpecial(1)) >> atom(hasMinorGrp(0)) >> not atom(isPopular(1))  >> not atom(hasStyle(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasStyle(1))  >> atom(hasMajorGrp(1)) ; 
  atom(isPopular(1)) >> not atom(isCreamy(1))  >> atom(isFattyFish(1)) >> not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSpecial(1)) >> atom(isPopular(1)) >> not atom(isSpecial(1))  >> atom(isFattyFish(1)) || not atom(isPopular(1))  ; 
  atom(isSpecial(1)) >> atom(isCreamy(1)) >> not atom(isPale(1))  >> atom(isTuna(1)) || atom(isPale(1)) ; 
  atom(isPopular(1)) >> atom(isRaw(1)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || not atom(isSpecial(1))  ; 
  atom(hasStyle(0)) >> atom(isVeg(1)) >> not atom(hasStyle(1))  ; 
  atom(isSpecial(1)) >> atom(hasMinorGrp(0)) >> not atom(isPopular(1))  >> not atom(hasStyle(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasMajorGrp(0))  >> atom(hasMajorGrp(1)) ; 
  atom(isPopular(1)) >> not atom(isCreamy(1))  >> atom(hasStyle(0)) >> not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSpecial(1)) >> atom(isCreamy(1)) >> not atom(isPale(1))  >> atom(isTuna(1)) || atom(isPale(1)) ; 
  atom(isPopular(1)) >> atom(isRaw(1)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || not atom(isSpecial(1))  ; 
  atom(hasStyle(0)) >> atom(isVeg(1)) >> not atom(hasStyle(1))  ; 
  atom(isSpecial(1)) >> atom(hasMinorGrp(0)) >> not atom(isPopular(1))  >> not atom(hasStyle(1))  ; 
  atom(isFattyFish(1)) >> not atom(hasMajorGrp(0))  >> atom(hasMajorGrp(1)) ; 
  atom(isPopular(1)) >> not atom(isCreamy(1))  >> atom(hasStyle(0)) >> not atom(hasMajorGrp(0))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSpecial(1)) >> atom(isCreamy(1)) >> not atom(isPale(1))  >> atom(isTuna(1)) || atom(isPale(1)) ; 
  atom(isPopular(1)) >> atom(isRaw(1)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || not atom(isSpecial(1))  ; 
  atom(isSpecial(1)) >> atom(hasMinorGrp(0)) >> not atom(isPopular(1))  ; 
  atom(isPopular(1)) >> not atom(isCreamy(1))  >> not atom(hasMajorGrp(0))  >> atom(hasMinorGrp(0)) ; 
  atom(isFattyFish(1)) >> not atom(hasMajorGrp(0))  >> atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isPopular(1)) >> atom(isRaw(1)) >> atom(hasStyle(0)) >> atom(isVeg(1)) || not atom(isSpecial(1))  ; 
  atom(isPopular(1)) >> not atom(isCreamy(1))  >> not atom(hasMajorGrp(0))  >> atom(isTuna(1)) ; 
  atom(isSpecial(1)) >> atom(hasMinorGrp(0)) >> not atom(isPopular(1))  >> not atom(hasMajorGrp(0))  ; 
  atom(isFattyFish(1)) >> not atom(hasMajorGrp(0))  >> atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> atom(hasMinorGrp(1)) >> not atom(isFattyFish(1))  || not atom(isPopular(1))  ; 
  atom(isSpecial(1)) >> atom(hasMinorGrp(0)) >> not atom(isPopular(1))  >> not atom(hasMajorGrp(0))  ; 
  atom(isPopular(1)) >> not atom(isCreamy(1))  >> not atom(hasMajorGrp(0))  
}.
