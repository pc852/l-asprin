asprin_vL version 1.0
Reading from stdin
-:279:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:304:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:385:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:659:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:836:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1037:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1041:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1041:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1047:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1146:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1172:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1292:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1326:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1348:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:189:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:190:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:191:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:192:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:221:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

-:258:20-56: info: atom does not occur in any rule head:
  _p_error_type(T,ordering_min_length(N),M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(hasPrice(1))),()) preference(1,(1,1),1,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,1),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),4,for(neg(atom(isLight(1)))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,aso)
Optimization: 26 2
Answer: 2
preference(1,(1,1),0,for(atom(hasPrice(1))),()) preference(1,(1,1),1,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),4,for(neg(atom(isLight(1)))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(isCreamy(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,aso)
Optimization: 20 2
Answer: 3
preference(1,(1,1),0,for(atom(hasPrice(1))),()) preference(1,(1,1),1,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),4,for(neg(atom(isLight(1)))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(isSpecial(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,(1,3),3,for(atom(hasMajorGrp(0))),()) preference(1,aso)
Optimization: 18 2
Answer: 4
preference(1,(1,1),0,for(atom(hasPrice(1))),()) preference(1,(1,1),1,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isCreamy(1)))),()) preference(1,(1,1),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),4,for(neg(atom(isLight(1)))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(isSpecial(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,aso)
Optimization: 16 2
Answer: 5
preference(1,(1,1),0,for(atom(hasPrice(1))),()) preference(1,(1,1),1,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isSweet(1)))),()) preference(1,(1,1),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),4,for(neg(atom(isLight(1)))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(isSpecial(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,aso)
Optimization: 13 2
Answer: 6
preference(1,(1,1),0,for(atom(hasPrice(1))),()) preference(1,(1,1),1,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(0)))),()) preference(1,(1,1),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),4,for(neg(atom(isLight(1)))),()) preference(1,(1,3),1,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(isSpecial(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,aso)
Optimization: 11 2
Answer: 7
preference(1,(1,4),0,for(atom(hasPrice(0))),()) preference(1,(1,5),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,6),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,2),2,for(neg(atom(hasPrice(1)))),()) preference(1,(1,4),3,for(neg(atom(hasMajorGrp(1)))),()) preference(1,(1,5),3,for(neg(atom(isSpecial(1)))),()) preference(1,(1,6),3,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),4,for(neg(atom(isTuna(1)))),()) preference(1,(1,4),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),1,for(atom(isPopular(1))),()) preference(1,(1,2),1,for(atom(hasPrice(1))),()) preference(1,(1,4),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isPopular(1))),()) preference(1,(1,6),1,for(atom(isPopular(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,4),2,for(atom(isPopular(1))),()) preference(1,(1,5),2,for(atom(isTuna(1))),()) preference(1,(1,6),2,for(atom(isTuna(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,aso)
Optimization: 7 5
Answer: 8
preference(1,(1,1),0,for(neg(atom(isLight(1)))),()) preference(1,(1,3),0,for(atom(hasPrice(0))),()) preference(1,(1,4),0,for(neg(atom(isSpecial(1)))),()) preference(1,(1,5),0,for(neg(atom(isTuna(1)))),()) preference(1,(1,6),0,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),0,for(neg(atom(isPopular(1)))),()) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,2),3,for(neg(atom(hasPrice(1)))),()) preference(1,(1,3),3,for(neg(atom(isSpecial(1)))),()) preference(1,(1,4),3,for(neg(atom(isPopular(1)))),()) preference(1,(1,2),4,for(neg(atom(hasStyle(0)))),()) preference(1,(1,1),1,for(atom(hasPrice(1))),()) preference(1,(1,2),1,for(atom(isSpecial(1))),()) preference(1,(1,3),1,for(atom(isPopular(1))),()) preference(1,(1,5),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),1,for(atom(hasMinorGrp(1))),()) preference(1,(1,8),1,for(atom(hasMinorGrp(2))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,2),2,for(atom(hasPrice(1))),()) preference(1,(1,3),2,for(atom(hasPrice(1))),()) preference(1,(1,4),2,for(atom(isTuna(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(hasPrice(1))),()) preference(1,(1,8),2,for(atom(isSpecial(1))),()) preference(1,(1,5),3,for(atom(isPopular(1))),()) preference(1,(1,6),3,for(atom(hasMinorGrp(2))),()) preference(1,(1,7),3,for(atom(isFattyFish(1))),()) preference(1,(1,8),3,for(atom(isCreamy(1))),()) preference(1,(1,1),4,for(atom(isLight(1))),()) preference(1,(1,5),4,for(atom(hasMajorGrp(1))),()) preference(1,(1,6),4,for(atom(isTuna(1))),()) preference(1,(1,7),4,for(atom(hasMajorGrp(1))),()) preference(1,(1,8),4,for(atom(isPopular(1))),()) preference(1,aso)
Optimization: 0 8
Progression : 0 [1;8] (Error: 7)
Answer: 9
preference(1,(1,2),0,for(neg(atom(isSpecial(1)))),()) preference(1,(1,5),0,for(atom(hasPrice(0))),()) preference(1,(1,6),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,8),0,for(atom(hasPrice(0))),()) preference(1,(1,2),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),1,for(neg(atom(hasMajorGrp(1)))),()) preference(1,(1,2),2,for(neg(atom(isPopular(1)))),()) preference(1,(1,3),2,for(neg(atom(isSpecial(1)))),()) preference(1,(1,5),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,6),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),4,for(neg(atom(isSpecial(1)))),()) preference(1,(1,8),4,for(neg(atom(isPopular(1)))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isTuna(1))),()) preference(1,(1,6),1,for(atom(isSpecial(1))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,4),2,for(atom(isPopular(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isTuna(1))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,2),3,for(atom(isCreamy(1))),()) preference(1,(1,3),3,for(atom(isSweet(1))),()) preference(1,(1,4),3,for(atom(isTuna(1))),()) preference(1,(1,7),3,for(atom(isFattyFish(1))),()) preference(1,(1,8),3,for(atom(isTuna(1))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,5),4,for(atom(isVeg(1))),()) preference(1,(1,6),4,for(atom(hasPrice(0))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(2))),()) preference(1,aso)
Optimization: 0 7
Answer: 10
preference(1,(1,5),0,for(atom(hasPrice(0))),()) preference(1,(1,6),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,8),0,for(atom(hasPrice(0))),()) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,7),1,for(neg(atom(hasMajorGrp(1)))),()) preference(1,(1,3),2,for(neg(atom(isSpecial(1)))),()) preference(1,(1,5),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,6),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),4,for(neg(atom(isSpecial(1)))),()) preference(1,(1,8),4,for(neg(atom(isPopular(1)))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isTuna(1))),()) preference(1,(1,6),1,for(atom(isSpecial(1))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,4),2,for(atom(isPopular(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,7),2,for(atom(isTuna(1))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,3),3,for(atom(isSweet(1))),()) preference(1,(1,4),3,for(atom(isTuna(1))),()) preference(1,(1,7),3,for(atom(isFattyFish(1))),()) preference(1,(1,8),3,for(atom(isTuna(1))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,5),4,for(atom(isVeg(1))),()) preference(1,(1,6),4,for(atom(hasPrice(0))),()) preference(1,(1,7),4,for(atom(hasMinorGrp(2))),()) preference(1,aso)
Optimization: 0 6
Progression : 0 [2;6] (Error: 2)
Answer: 11
preference(1,(1,3),0,for(neg(atom(isSpecial(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,6),0,for(neg(atom(hasPrice(1)))),()) preference(1,(1,8),0,for(atom(hasPrice(0))),()) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(isVeg(1)))),()) preference(1,(1,3),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,6),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),4,for(neg(atom(isSpecial(1)))),()) preference(1,(1,8),4,for(neg(atom(isPopular(1)))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isTuna(1))),()) preference(1,(1,6),1,for(atom(isSpecial(1))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,4),2,for(atom(isPopular(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,6),2,for(atom(hasPrice(1))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,4),3,for(atom(isTuna(1))),()) preference(1,(1,5),3,for(atom(isLight(1))),()) preference(1,(1,8),3,for(atom(isTuna(1))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,5),4,for(atom(isVeg(1))),()) preference(1,(1,6),4,for(atom(hasPrice(0))),()) preference(1,aso)
Optimization: 0 5
Answer: 12
preference(1,(1,3),0,for(neg(atom(isSpecial(1)))),()) preference(1,(1,5),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),0,for(atom(hasPrice(0))),()) preference(1,(1,4),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),2,for(neg(atom(isVeg(1)))),()) preference(1,(1,3),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,4),4,for(neg(atom(isSpecial(1)))),()) preference(1,(1,8),4,for(neg(atom(isPopular(1)))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isTuna(1))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,4),2,for(atom(isPopular(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,4),3,for(atom(isTuna(1))),()) preference(1,(1,5),3,for(atom(isLight(1))),()) preference(1,(1,8),3,for(atom(isTuna(1))),()) preference(1,(1,3),4,for(atom(isTuna(1))),()) preference(1,(1,5),4,for(atom(isVeg(1))),()) preference(1,aso)
Optimization: 0 4
Answer: 13
preference(1,(1,5),0,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,8),0,for(atom(hasPrice(0))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),4,for(neg(atom(isSpecial(1)))),()) preference(1,(1,8),4,for(neg(atom(isPopular(1)))),()) preference(1,(1,4),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isTuna(1))),()) preference(1,(1,8),1,for(atom(isSpecial(1))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(0))),()) preference(1,(1,8),2,for(atom(hasPrice(1))),()) preference(1,(1,4),3,for(atom(isPopular(1))),()) preference(1,(1,5),3,for(atom(isLight(1))),()) preference(1,(1,8),3,for(atom(isTuna(1))),()) preference(1,(1,5),4,for(atom(isVeg(1))),()) preference(1,aso)
Optimization: 0 3
OPTIMUM FOUND

Models       : 13
  Optimum    : yes
Optimization : 0 3
Calls        : 1
Time         : 11.791s (Solving: 4.80s 1st Model: 0.18s Unsat: 3.43s)
CPU Time     : 26.042s
Threads      : 4        (Winner: 1)

Choices      : 153293   (Domain: 263)
Conflicts    : 16098    (Analyzed: 16094)
Restarts     : 40       (Average: 402.35 Last: 1402)
Model-Level  : 731.0   
Problems     : 7        (Average Length: 0.57 Splits: 0)
Lemmas       : 32814    (Deleted: 2985)
  Binary     : 1624     (Ratio:   4.95%)
  Ternary    : 2965     (Ratio:   9.04%)
  Conflict   : 16093    (Average Length:  105.7 Ratio:  49.04%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 16721    (Average Length:   25.1 Ratio:  50.96%) 
  Distributed: 5585     (Ratio:  34.70% Average LBD: 3.16) 
  Integrated : 16748    (Ratio: 299.87% Unit: 186 Average Jumps: 98.39)
Backjumps    : 16094    (Average:  7.79 Max: 961 Sum: 125376)
  Executed   : 16083    (Average:  7.78 Max: 961 Sum: 125207 Ratio:  99.87%)
  Bounded    : 11       (Average: 15.36 Max:  35 Sum:    169 Ratio:   0.13%)

Rules        : 2469321 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 678491  
Bodies       : 803892  
  Count      : 1768    
Equivalences : 2076724  (Atom=Atom: 596435 Body=Body: 643222 Other: 837067)
Tight        : Yes
Variables    : 92679    (Eliminated:    0 Frozen: 60903)
Constraints  : 1935861  (Binary:  95.3% Ternary:   4.0% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  not atom(isSpecial(1))  >> not atom(hasPrice(0))  >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(hasPrice(1)) ; 
  atom(hasPrice(1)) >> atom(isCreamy(1)) >> not atom(isRaw(1))  >> not atom(isLight(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isSpecial(1))  >> not atom(hasPrice(0))  >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(hasPrice(1)) ; 
  atom(hasPrice(1)) >> atom(isCreamy(1)) >> not atom(isRaw(0))  >> not atom(isLight(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isSpecial(1))  >> not atom(hasPrice(0))  >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(hasPrice(1)) ; 
  atom(hasPrice(1)) >> atom(isSpecial(1)) >> atom(hasMajorGrp(0)) >> not atom(isLight(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isSpecial(1))  >> not atom(hasPrice(0))  >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(hasPrice(1)) ; 
  atom(hasPrice(1)) >> atom(isSpecial(1)) >> not atom(isCreamy(1))  >> not atom(isLight(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isSpecial(1))  >> not atom(hasPrice(0))  >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(hasPrice(1)) ; 
  atom(hasPrice(1)) >> atom(isSpecial(1)) >> not atom(isSweet(1))  >> not atom(isLight(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isSpecial(1))  >> not atom(hasPrice(0))  >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(hasPrice(1)) ; 
  atom(hasPrice(1)) >> atom(isSpecial(1)) >> not atom(isRaw(0))  >> not atom(isLight(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSpecial(1)) >> atom(isPopular(1)) >> not atom(hasMajorGrp(1))  >> not atom(hasPrice(1))  || atom(hasPrice(0)) ; 
  atom(isPopular(1)) >> atom(isTuna(1)) >> not atom(isSpecial(1))  || not atom(hasPrice(1))  ; 
  atom(isPopular(1)) >> atom(isTuna(1)) >> not atom(isSpecial(1))  || not atom(hasPrice(1))  ; 
  atom(isPopular(1)) >> atom(hasMinorGrp(1)) >> atom(hasPrice(0)) >> not atom(isTuna(1))  ; 
  atom(hasPrice(1)) >> not atom(hasPrice(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(hasPrice(1)) >> atom(hasMinorGrp(1)) >> not atom(hasPrice(0))  >> atom(isLight(1)) || not atom(isLight(1))  ; 
  atom(isPopular(1)) >> atom(hasPrice(1)) >> not atom(isSpecial(1))  || atom(hasPrice(0)) ; 
  not atom(hasPrice(0))  >> atom(isTuna(1)) >> not atom(isPopular(1))  || not atom(isSpecial(1))  ; 
  atom(hasMinorGrp(1)) >> atom(hasMinorGrp(0)) >> atom(isPopular(1)) >> atom(hasMajorGrp(1)) || not atom(isTuna(1))  ; 
  atom(hasMinorGrp(1)) >> atom(hasPrice(1)) >> atom(hasMinorGrp(2)) >> atom(isTuna(1)) || not atom(isRaw(1))  ; 
  atom(hasMinorGrp(2)) >> atom(isSpecial(1)) >> atom(isCreamy(1)) >> atom(isPopular(1)) || not atom(isPopular(1))  ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(1))  >> not atom(hasStyle(0))  ; 
  not atom(hasPrice(0))  >> atom(hasPrice(1)) >> atom(isFattyFish(1)) >> atom(hasMajorGrp(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(hasPrice(0))  >> not atom(isPopular(1))  >> atom(isCreamy(1)) || not atom(isSpecial(1))  ; 
  atom(isTuna(1)) >> atom(hasMinorGrp(0)) >> not atom(hasMajorGrp(0))  >> atom(isVeg(1)) || atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(0))  >> atom(hasPrice(0)) || not atom(hasPrice(1))  ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> atom(isTuna(1)) >> not atom(isPopular(1))  || atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> not atom(isSpecial(1))  >> atom(isSweet(1)) >> atom(isTuna(1)) ; 
  not atom(hasPrice(0))  >> atom(isPopular(1)) >> atom(isTuna(1)) >> not atom(isSpecial(1))  ; 
  not atom(hasMajorGrp(1))  >> atom(isTuna(1)) >> atom(isFattyFish(1)) >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTuna(1)) >> atom(hasMinorGrp(0)) >> not atom(hasMajorGrp(0))  >> atom(isVeg(1)) || atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(0))  >> atom(hasPrice(0)) || not atom(hasPrice(1))  ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> atom(isTuna(1)) >> not atom(isPopular(1))  || atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> not atom(isSpecial(1))  >> atom(isSweet(1)) >> atom(isTuna(1)) ; 
  not atom(hasPrice(0))  >> atom(isPopular(1)) >> atom(isTuna(1)) >> not atom(isSpecial(1))  ; 
  not atom(hasMajorGrp(1))  >> atom(isTuna(1)) >> atom(isFattyFish(1)) >> atom(hasMinorGrp(2)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSpecial(1)) >> not atom(isVeg(1))  >> not atom(hasMajorGrp(0))  >> atom(isTuna(1)) || not atom(isSpecial(1))  ; 
  atom(isTuna(1)) >> atom(hasMinorGrp(0)) >> atom(isLight(1)) >> atom(isVeg(1)) || not atom(hasMinorGrp(1))  ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(0))  >> atom(hasPrice(0)) || not atom(hasPrice(1))  ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> atom(isTuna(1)) >> not atom(isPopular(1))  || atom(hasPrice(0)) ; 
  not atom(hasPrice(0))  >> atom(isPopular(1)) >> atom(isTuna(1)) >> not atom(isSpecial(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSpecial(1)) >> not atom(isVeg(1))  >> not atom(hasMajorGrp(0))  >> atom(isTuna(1)) || not atom(isSpecial(1))  ; 
  atom(isTuna(1)) >> atom(hasMinorGrp(0)) >> atom(isLight(1)) >> atom(isVeg(1)) || not atom(hasMinorGrp(1))  ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> atom(isTuna(1)) >> not atom(isPopular(1))  || atom(hasPrice(0)) ; 
  not atom(hasPrice(0))  >> atom(isPopular(1)) >> atom(isTuna(1)) >> not atom(isSpecial(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isTuna(1)) >> atom(hasMinorGrp(0)) >> atom(isLight(1)) >> atom(isVeg(1)) || not atom(hasMinorGrp(1))  ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> atom(isTuna(1)) >> not atom(isPopular(1))  || atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> not atom(hasPrice(0))  >> atom(isPopular(1)) >> not atom(isSpecial(1))  
}.
