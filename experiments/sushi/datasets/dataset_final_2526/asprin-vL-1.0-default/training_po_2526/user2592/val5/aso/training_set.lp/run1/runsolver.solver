asprin_vL version 1.0
Reading from stdin
-:279:3-30: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#P4)

-:304:3-31: info: atom does not occur in any rule head:
  preference(#X0,#P1,#P2,name(#X3),#X4)

-:385:36-48: info: atom does not occur in any rule head:
  _p_rule(#X0,#X1,#P2,#X3,#X4)

-:659:34-45: info: atom does not occur in any rule head:
  better(#X0,#P1,#X2,#X3)

-:836:35-45: info: atom does not occur in any rule head:
  _p_group(#X0,#P1,#X2,#X3)

-:1037:50-58: info: atom does not occur in any rule head:
  _p_rel(#X0,#P1,#X2,#X3)

-:1041:46-59: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#X2,#P3,#X4,#X5)

-:1041:61-75: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#X2,#P3,#X4,#X5)

-:1047:23-37: info: atom does not occur in any rule head:
  _p_post(#X0,#X1,#P2,#P3,#X4,#X5)

-:1146:74-85: info: atom does not occur in any rule head:
  _p_edge(#X0,#X1,#P2,#X3,#X4)

-:1172:64-75: info: atom does not occur in any rule head:
  _p_edge(#X0,#P1,#X2,#X3,#X4)

-:1292:35-48: info: atom does not occur in any rule head:
  _p_lits(#X0,#X1,#P2,#P3,#X4,#X5)

-:1326:25-39: info: atom does not occur in any rule head:
  _p_pre(#X0,#X1,#P2,#P3,#X4,#X5)

-:1348:33-45: info: atom does not occur in any rule head:
  _p_acyclic(#X0,#P1,#X2,#X3)

-:189:25-37: info: atom does not occur in any rule head:
  forbid_worse

-:190:25-37: info: atom does not occur in any rule head:
  forbid_equal

-:191:25-35: info: atom does not occur in any rule head:
  forbid_unc

-:192:25-36: info: atom does not occur in any rule head:
  forbid_diff

-:221:20-31: info: atom does not occur in any rule head:
  _p_optimize(P,M_,N_)

-:258:20-56: info: atom does not occur in any rule head:
  _p_error_type(T,ordering_min_length(N),M_,N_)

Solving...
Answer: 1
preference(1,(1,1),0,for(atom(isSpecial(1))),()) preference(1,(1,1),1,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,1),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),4,for(neg(atom(hasMinorGrp(2)))),()) preference(1,(1,5),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,3),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,aso)
Optimization: 18 3
Answer: 2
preference(1,(1,1),0,for(atom(isSpecial(1))),()) preference(1,(1,1),1,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,3),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,(1,3),4,for(atom(hasPrice(0))),()) preference(1,aso)
Optimization: 16 3
Answer: 3
preference(1,(1,1),0,for(atom(isSpecial(1))),()) preference(1,(1,1),1,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isLight(1)))),()) preference(1,(1,1),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,3),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,(1,3),4,for(atom(hasPrice(0))),()) preference(1,aso)
Optimization: 14 3
Answer: 4
preference(1,(1,1),0,for(atom(isSpecial(1))),()) preference(1,(1,1),1,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,5),3,for(neg(atom(isLight(1)))),()) preference(1,(1,1),4,for(neg(atom(isSweet(1)))),()) preference(1,(1,5),4,for(neg(atom(isPopular(1)))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,3),2,for(atom(hasPrice(1))),()) preference(1,(1,5),2,for(atom(hasPrice(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,(1,3),4,for(atom(hasPrice(0))),()) preference(1,aso)
Optimization: 13 3
Answer: 5
preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),0,for(atom(hasPrice(0))),()) preference(1,(1,8),0,for(neg(atom(isVeg(1)))),()) preference(1,(1,2),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),1,for(neg(atom(hasMajorGrp(1)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),2,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),2,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,3),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,6),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),4,for(neg(atom(isPopular(1)))),()) preference(1,(1,5),4,for(neg(atom(isSpecial(1)))),()) preference(1,(1,6),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),1,for(atom(isSpecial(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(isRaw(0))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,6),1,for(atom(isSpecial(1))),()) preference(1,(1,2),2,for(atom(isSpecial(1))),()) preference(1,(1,3),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,(1,2),3,for(atom(isPopular(1))),()) preference(1,(1,4),3,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,(1,7),3,for(atom(isTuna(1))),()) preference(1,(1,2),4,for(atom(isLight(1))),()) preference(1,(1,7),4,for(atom(isRaw(1))),()) preference(1,aso)
Optimization: 0 8
Progression : 0 [1;8] (Error: 7)
Answer: 6
preference(1,(1,2),0,for(neg(atom(isSweet(1)))),()) preference(1,(1,3),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,4),0,for(atom(hasPrice(0))),()) preference(1,(1,2),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,7),1,for(neg(atom(hasPrice(0)))),()) preference(1,(1,1),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,4),2,for(neg(atom(isSweet(1)))),()) preference(1,(1,7),2,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),3,for(neg(atom(hasMinorGrp(1)))),()) preference(1,(1,6),3,for(neg(atom(hasPrice(0)))),()) preference(1,(1,3),4,for(neg(atom(isRaw(0)))),()) preference(1,(1,4),4,for(neg(atom(isPopular(1)))),()) preference(1,(1,5),4,for(neg(atom(isSpecial(1)))),()) preference(1,(1,6),4,for(neg(atom(hasPrice(1)))),()) preference(1,(1,1),1,for(atom(isSpecial(1))),()) preference(1,(1,3),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(isRaw(0))),()) preference(1,(1,5),1,for(atom(isSpecial(1))),()) preference(1,(1,6),1,for(atom(isSpecial(1))),()) preference(1,(1,2),2,for(atom(isSpecial(1))),()) preference(1,(1,3),2,for(atom(isSweet(1))),()) preference(1,(1,5),2,for(atom(isFattyFish(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,1),3,for(atom(hasPrice(0))),()) preference(1,(1,2),3,for(atom(isPopular(1))),()) preference(1,(1,4),3,for(atom(isRaw(1))),()) preference(1,(1,5),3,for(atom(isRaw(0))),()) preference(1,(1,7),3,for(atom(isTuna(1))),()) preference(1,(1,2),4,for(atom(isLight(1))),()) preference(1,(1,7),4,for(atom(isRaw(1))),()) preference(1,aso)
Optimization: 0 7
Answer: 7
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),0,for(neg(atom(isTuna(1)))),()) preference(1,(1,5),0,for(neg(atom(isPopular(1)))),()) preference(1,(1,8),0,for(atom(isRaw(1))),()) preference(1,(1,3),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),3,for(neg(atom(hasMinorGrp(0)))),()) preference(1,(1,4),4,for(neg(atom(isSpecial(1)))),()) preference(1,(1,6),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(isSpecial(1))),()) preference(1,(1,5),1,for(atom(isSweet(1))),()) preference(1,(1,6),1,for(atom(hasPrice(1))),()) preference(1,(1,8),1,for(atom(isSweet(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,5),2,for(atom(hasMinorGrp(1))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(isPopular(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,3),3,for(atom(hasStyle(0))),()) preference(1,(1,4),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(hasPrice(1))),()) preference(1,(1,8),4,for(atom(hasMinorGrp(2))),()) preference(1,aso)
Optimization: 0 6
Answer: 8
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),0,for(neg(atom(isTuna(1)))),()) preference(1,(1,8),0,for(atom(isRaw(1))),()) preference(1,(1,3),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,6),3,for(neg(atom(isRaw(1)))),()) preference(1,(1,8),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,4),4,for(neg(atom(isSpecial(1)))),()) preference(1,(1,6),4,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,1),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(isSpecial(1))),()) preference(1,(1,6),1,for(atom(hasPrice(1))),()) preference(1,(1,8),1,for(atom(isSweet(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,6),2,for(atom(isFattyFish(1))),()) preference(1,(1,8),2,for(atom(isPopular(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,3),3,for(atom(hasStyle(0))),()) preference(1,(1,4),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(hasPrice(1))),()) preference(1,(1,8),4,for(atom(isPale(1))),()) preference(1,aso)
Optimization: 0 5
Progression : 0 [2;5] (Error: 1.5)
Answer: 9
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,3),0,for(neg(atom(isTuna(1)))),()) preference(1,(1,8),0,for(atom(isRaw(1))),()) preference(1,(1,3),1,for(neg(atom(isRaw(1)))),()) preference(1,(1,3),2,for(neg(atom(isCreamy(1)))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,4),4,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(isSpecial(1))),()) preference(1,(1,8),1,for(atom(isSweet(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isPopular(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,3),3,for(atom(hasStyle(0))),()) preference(1,(1,4),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(hasPrice(1))),()) preference(1,(1,8),4,for(atom(isPale(1))),()) preference(1,aso)
Optimization: 0 4
Answer: 10
preference(1,(1,1),0,for(neg(atom(isFattyFish(1)))),()) preference(1,(1,8),0,for(atom(isRaw(1))),()) preference(1,(1,4),2,for(neg(atom(hasPrice(0)))),()) preference(1,(1,8),3,for(neg(atom(hasMajorGrp(0)))),()) preference(1,(1,4),4,for(neg(atom(isSpecial(1)))),()) preference(1,(1,1),1,for(atom(isSpecial(1))),()) preference(1,(1,4),1,for(atom(isSpecial(1))),()) preference(1,(1,8),1,for(atom(isSweet(1))),()) preference(1,(1,1),2,for(atom(hasMinorGrp(2))),()) preference(1,(1,8),2,for(atom(isPopular(1))),()) preference(1,(1,1),3,for(atom(isRaw(1))),()) preference(1,(1,4),3,for(atom(isFattyFish(1))),()) preference(1,(1,1),4,for(atom(hasPrice(1))),()) preference(1,(1,8),4,for(atom(isPale(1))),()) preference(1,aso)
Optimization: 0 3
OPTIMUM FOUND

Models       : 10
  Optimum    : yes
Optimization : 0 3
Calls        : 1
Time         : 11.358s (Solving: 5.01s 1st Model: 0.19s Unsat: 4.11s)
CPU Time     : 26.221s
Threads      : 4        (Winner: 3)

Choices      : 121681   (Domain: 389)
Conflicts    : 16959    (Analyzed: 16956)
Restarts     : 42       (Average: 403.71 Last: 839)
Model-Level  : 699.2   
Problems     : 6        (Average Length: 0.67 Splits: 0)
Lemmas       : 37602    (Deleted: 3500)
  Binary     : 1640     (Ratio:   4.36%)
  Ternary    : 3196     (Ratio:   8.50%)
  Conflict   : 16947    (Average Length:   84.3 Ratio:  45.07%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 20655    (Average Length:   25.3 Ratio:  54.93%) 
  Distributed: 6903     (Ratio:  40.73% Average LBD: 3.09) 
  Integrated : 20704    (Ratio: 299.93% Unit: 155 Average Jumps: 57.29)
Backjumps    : 16956    (Average:  6.04 Max: 957 Sum: 102345)
  Executed   : 16946    (Average:  6.03 Max: 957 Sum: 102244 Ratio:  99.90%)
  Bounded    : 10       (Average: 10.10 Max:  35 Sum:    101 Ratio:   0.10%)

Rules        : 2465417 
  Choice     : 41      
  Minimize   : 2       
Atoms        : 676571  
Bodies       : 802226  
  Count      : 1768    
Equivalences : 2070706  (Atom=Atom: 593885 Body=Body: 640350 Other: 836471)
Tight        : Yes
Variables    : 93551    (Eliminated:    0 Frozen: 61775)
Constraints  : 1938333  (Binary:  95.3% Ternary:   4.1% Other:   0.7%)


Learned preference statement: 

#preference(1,aso){
  not atom(isSpecial(1))  >> not atom(hasPrice(0))  >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(isSpecial(1)) ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> not atom(isRaw(1))  >> not atom(hasMinorGrp(2))  ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> not atom(hasMinorGrp(2))  >> not atom(isRaw(0))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isSpecial(1))  >> not atom(hasPrice(0))  >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(isSpecial(1)) ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> not atom(isRaw(1))  >> atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> not atom(hasPrice(0))  >> not atom(isFattyFish(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isSpecial(1))  >> not atom(hasPrice(0))  >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(isSpecial(1)) ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> not atom(isRaw(1))  >> atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> not atom(isLight(1))  >> not atom(isSweet(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isSpecial(1))  >> not atom(hasPrice(0))  >> atom(hasPrice(0)) >> not atom(isSweet(1))  || atom(isSpecial(1)) ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> not atom(isRaw(1))  >> atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(hasPrice(1)) >> not atom(isLight(1))  >> not atom(isPopular(1))  
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRaw(1))  >> atom(isSpecial(1)) >> atom(isPopular(1)) >> atom(isLight(1)) || not atom(isSweet(1))  ; 
  atom(isSpecial(1)) >> atom(isSweet(1)) >> not atom(hasMinorGrp(1))  >> not atom(isRaw(0))  || not atom(isFattyFish(1))  ; 
  atom(isRaw(0)) >> not atom(isSweet(1))  >> atom(isRaw(1)) >> not atom(isPopular(1))  || atom(hasPrice(0)) ; 
  not atom(hasMajorGrp(1))  >> not atom(hasMajorGrp(0))  || not atom(isVeg(1))  ; 
  atom(isSpecial(1)) >> not atom(hasPrice(0))  >> atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(isFattyFish(1)) >> atom(isRaw(0)) >> not atom(isSpecial(1))  ; 
  atom(isSpecial(1)) >> atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  ; 
  not atom(hasPrice(0))  >> not atom(isRaw(1))  >> atom(isTuna(1)) >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  not atom(isRaw(1))  >> atom(isSpecial(1)) >> atom(isPopular(1)) >> atom(isLight(1)) || not atom(isSweet(1))  ; 
  atom(isSpecial(1)) >> atom(isSweet(1)) >> not atom(hasMinorGrp(1))  >> not atom(isRaw(0))  || not atom(isFattyFish(1))  ; 
  atom(isRaw(0)) >> not atom(isSweet(1))  >> atom(isRaw(1)) >> not atom(isPopular(1))  || atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> not atom(hasPrice(0))  >> atom(hasPrice(0)) ; 
  atom(isSpecial(1)) >> atom(isFattyFish(1)) >> atom(isRaw(0)) >> not atom(isSpecial(1))  ; 
  atom(isSpecial(1)) >> atom(isFattyFish(1)) >> not atom(hasPrice(0))  >> not atom(hasPrice(1))  ; 
  not atom(hasPrice(0))  >> not atom(isRaw(1))  >> atom(isTuna(1)) >> atom(isRaw(1)) 
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSpecial(1)) >> atom(hasMinorGrp(2)) >> atom(isRaw(1)) >> atom(hasPrice(1)) || not atom(isFattyFish(1))  ; 
  not atom(isRaw(1))  >> not atom(isCreamy(1))  >> atom(hasStyle(0)) || not atom(isTuna(1))  ; 
  atom(isSweet(1)) >> atom(hasMinorGrp(1)) || not atom(isPopular(1))  ; 
  atom(isSweet(1)) >> atom(isPopular(1)) >> not atom(hasMinorGrp(0))  >> atom(hasMinorGrp(2)) || atom(isRaw(1)) ; 
  atom(isSpecial(1)) >> not atom(hasPrice(0))  >> atom(isFattyFish(1)) >> not atom(isSpecial(1))  ; 
  atom(hasPrice(1)) >> atom(isFattyFish(1)) >> not atom(isRaw(1))  >> not atom(isFattyFish(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSpecial(1)) >> atom(hasMinorGrp(2)) >> atom(isRaw(1)) >> atom(hasPrice(1)) || not atom(isFattyFish(1))  ; 
  not atom(isRaw(1))  >> not atom(isCreamy(1))  >> atom(hasStyle(0)) || not atom(isTuna(1))  ; 
  atom(isSweet(1)) >> atom(isPopular(1)) >> not atom(hasMajorGrp(0))  >> atom(isPale(1)) || atom(isRaw(1)) ; 
  atom(isSpecial(1)) >> not atom(hasPrice(0))  >> atom(isFattyFish(1)) >> not atom(isSpecial(1))  ; 
  atom(hasPrice(1)) >> atom(isFattyFish(1)) >> not atom(isRaw(1))  >> not atom(isFattyFish(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSpecial(1)) >> atom(hasMinorGrp(2)) >> atom(isRaw(1)) >> atom(hasPrice(1)) || not atom(isFattyFish(1))  ; 
  not atom(isRaw(1))  >> not atom(isCreamy(1))  >> atom(hasStyle(0)) || not atom(isTuna(1))  ; 
  atom(isSweet(1)) >> atom(isPopular(1)) >> not atom(hasMajorGrp(0))  >> atom(isPale(1)) || atom(isRaw(1)) ; 
  atom(isSpecial(1)) >> not atom(hasPrice(0))  >> atom(isFattyFish(1)) >> not atom(isSpecial(1))  
}.

Learned preference statement: 

#preference(1,aso){
  atom(isSpecial(1)) >> atom(hasMinorGrp(2)) >> atom(isRaw(1)) >> atom(hasPrice(1)) || not atom(isFattyFish(1))  ; 
  atom(isSweet(1)) >> atom(isPopular(1)) >> not atom(hasMajorGrp(0))  >> atom(isPale(1)) || atom(isRaw(1)) ; 
  atom(isSpecial(1)) >> not atom(hasPrice(0))  >> atom(isFattyFish(1)) >> not atom(isSpecial(1))  
}.
